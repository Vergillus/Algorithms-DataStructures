void SelectionSort(std::vector<int> &arr)
{
	for (unsigned int i = 0; i < arr.size() - 1; i++)
	{
		int minIndex = i;
		for (unsigned int j = i + 1; j < arr.size(); j++)
		{
			if (arr[j] < arr[minIndex])
			{
				minIndex = j;
			}
		}
		int temp = arr[i];
		arr[i] = arr[minIndex];
		arr[minIndex] = temp;
	}
}

void BubbleSort(int arr[],int size)
{
	for (int i = 0; i < size - 1; i++)
	{
		int flag = 0;							  // flag is for optimization	
		for (int j = 0; j < size - i - 1; j++) // size - i - 1 for optimization
		{
			if (arr[j] > arr[j + 1])
			{				
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
				flag = 1;
			}			
		}	
		if (flag == 0)
		{
			break;
		}
	}	
}

void InsertionSort(int arr[], int size)
{
	int value, index;

	for (int i = 1; i < size; i++)
	{
		value = arr[i];
		index = i;

		while (index > 0 && arr[index - 1] > value)
		{
			arr[index] = arr[index - 1];
			index--;
		}
		arr[index] = value;
	}
}

namespace MergeSort {

	void Merge(int arr[], int *left, int leftCount, int *right, int rightCount)
	{
		int i, j, k;
		i = j = k = 0;

		while (i < leftCount && j < rightCount)
		{
			if (left[i] < right[j])
			{
				arr[k] = left[i];
				i++;
			}

			else
			{
				arr[k] = right[j];
				j++;
			}
			k++;
		}

		while (i < leftCount)
		{
			arr[k] = left[i];
			k++;
			i++;
		}
		while (j < rightCount)
		{
			arr[k] = right[j];
			k++;
			j++;
		}

	}

	void Sort(int arr[], int n)
	{
		if (n < 2) return;

		int mid = n / 2;

		int *left = new int[mid]; //(int *)malloc(sizeof(int) * mid);
		int *right = new int[n - mid]; //(int *)malloc(sizeof(int) * (n - mid));

		for (int i = 0; i < mid; i++)
		{
			left[i] = arr[i];
		}

		for (int i = mid; i < n; i++)
		{
			right[i - mid] = arr[i];
		}

		Sort(left, mid);
		Sort(right, n - mid);
		Merge(arr, left, mid, right, n - mid);

		free(left);
		free(right);
	}
}

namespace QuickSort {	

	void Swap(/*int *arr,*/int &index1, int &index2)
	{
		/*int temp = arr[index1];
		arr[index1] = arr[index2];
		arr[index2] = temp;*/

		int temp = index1;
		index1 = index2;
		index2 = temp;
	}


	int Partition(int *arr, int start, int end)
	{
		int pivot = arr[end];
		int partitionIndex = start;

		for (int i = start; i < end; i++)
		{
			if (arr[i] <= pivot)
			{
				Swap(arr[i], arr[partitionIndex]);
				partitionIndex++;
			}
		}
		Swap(arr[partitionIndex], arr[end]);

		return partitionIndex;
	}


	void Sort(int *arr, int start, int end)
	{
		if (start < end)
		{
			int pIndex = Partition(arr, start, end);
			Sort(arr, start, pIndex - 1); // Left partition
			Sort(arr, pIndex + 1, end); // Right partition
		}
	}
}

