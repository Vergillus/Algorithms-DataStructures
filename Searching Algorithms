namespace BinarySearch {

	int Search(int *arr, int arraySize, int searchValue)
	{
		int start = 0, end = arraySize - 1;

		while (start <= end)
		{
			int mid = start + (end - start) / 2; // (start + end) may overflow
			if (searchValue == arr[mid]) return mid;
			else if (searchValue < arr[mid]) end = mid - 1;
			else start = mid + 1;
		}

		return -1; // Not found

	}

	int RecursiveSearch(int *arr, int startIndex, int endIndex, int searchValue)
	{
		if (startIndex <= endIndex)
		{
			int mid = startIndex + (endIndex - startIndex) / 2;
			if (searchValue == arr[mid]) return mid;
			else if (searchValue < arr[mid]) return RecursiveSearch(arr, startIndex, mid - 1, searchValue);
			else return RecursiveSearch(arr, mid + 1, endIndex, searchValue);
		}
		return -1;
	}

	int FindFirstOrLast(int *arr, int size, int val, bool findFirst)
	{
		int start = 0, end = size - 1;
		int result = -1;

		while (start <= end)
		{
			int mid = start + (end - start) / 2;

			if (arr[mid] == val)
			{
				result = mid;
				if (findFirst) end = mid - 1; // search left for lower indices
				else start = mid + 1; // search right for higher indices
			}
			else if (val < arr[mid]) end = mid - 1;
			else start = mid + 1;
		}

		return result;

	}

	int FindCount(int *arr, int size, int searchValue)
	{

		int first = FindFirstOrLast(arr, size, searchValue, true);
		int last = FindFirstOrLast(arr, size, searchValue, false);

		int res = last - first + 1;

		return (res > 0) ? res : 1; 

	}

	// Finds the how many times the given array has rotated
	// Does not work on arrays that contains duplicate elements
	int FindRotatedCount(int *arr, int size)
	{
		int start = 0, end = size - 1;		

		while (start <= end)
		{		

			if (arr[start] <= arr[end])	return start;

			int mid = start + (end - start) / 2;
			int next = (mid + 1) % size;
	  	int prev = (mid + size - 1) % size;
			
			if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) return mid;
			else if (arr[mid] <= arr[end]) end = mid - 1;
  		else if (arr[mid] >= arr[start]) start = mid + 1;
			
		}

		return -1;
	}

	// Find the index of an element in the circular array
	// Will not work on arrays that have duplicate elements.
	int CircularArraySearch(int *arr, int size, int searchValue)
	{
		int start = 0, end = size - 1;

		while (start <=end)
		{
			int mid = start + (end - start) / 2;

			if (searchValue == arr[mid]) return mid;

			if (arr[mid] <= arr[end]) // right half is sorted
		{
				if (searchValue > arr[mid] && searchValue <= arr[end])
				{
					start = mid + 1; // search right sorted half
				}
				else 
					end = mid - 1; // search left sorted half
			}
			else
			{
				if (arr[start] <= searchValue && searchValue <= arr[mid]) 
					end = mid - 1; // search left sorted half
				else
					start = mid + 1; // search right sorted half
			}
		}

		return -1;
	}
}
