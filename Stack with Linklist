#include "stdafx.h"
#include <iostream>
#include <memory>

class MYStackList  // Stack with link list
{
	struct Node
	{
		int data;
		Node* next;
	};

	Node* head;
	Node* rear;

public:

	MYStackList() : head(nullptr), rear(nullptr) {};

	Node* CreateNewNode(int value)
	{
		Node* temp = new Node();
		temp->data = value;
		temp->next = nullptr;

		return temp;
	}

	void Enqueue(int value)
	{
		if (IsEmpty())
		{
			head = rear = CreateNewNode(value);
			return;
		}
		
		// This code runs with complexity of O(1) which is constant time
		rear->next = CreateNewNode(value);
		rear = rear->next;
		/*----------------------------------------*/

		// The complexity of code below is O(n) which is not suitable for queue
		/*Node* temp = head;

		while (temp->next != nullptr)
			temp = temp->next;

		temp->next = CreateNewNode(value);		*/
	}

	void Dequeue() 
	{
		if (IsEmpty()) return;
		if (head == rear) head = rear = nullptr;

		Node* temp = head;		

		head = head->next;

		free(temp);
	}

	bool IsEmpty(){ return (head == nullptr && rear == nullptr) ? true : false; }

	int front()
	{
		if (IsEmpty()) return -1;
		
		return head->data;
	}

	void PrintLLQ()
	{
		if (IsEmpty()) return;

		Node* temp = head;

		std::cout << "Queue list elements : ";
		while (temp != nullptr)
		{
			std::cout << temp->data << " ";
			temp = temp->next;
		}
		std::cout << "\n";
	}

};
